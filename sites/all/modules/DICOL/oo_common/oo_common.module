<?php

/*
 * Get field value
 */
  function __get_field_value($field, $type = 'string', $attributes = array()) {
    switch($type) {
      case 'file_url' :
      if (!empty($field['und'][0]['uri'])) {
        return file_create_url($field['und'][0]['uri']);
      } else {
        return '';
      }
      break;
      case 'file_type' :
      $file_type = '';

      if (!empty($field['und'][0]['filemime'])) {
        $arr = explode('/', $field['und'][0]['filemime']);
        $file_type = $arr[0];
      }
      return $file_type;
      break;
      case 'media' :
        //$filemime = explode('/', $eventGalleryObj->f2_filemime);

      break;

      case 'files' :
      $arr = array();

      if ($field && isset($field['und'])) {
        foreach ($field['und'] as $key => $value) {
          if (isset($value) && $value['fid']) {
            $arr[] = $value;
          }
        }
      }

      return $arr;
      break;
      case 'string' :
      if (!is_null($field) && isset($field['und'][0]['value'])) {
        return $field['und'][0]['value'];
      } else {
        return '';
      }
      break;
      case 'integer' :
      if (!is_null($field) && isset($field['und'][0]['value'])) {
        return (int)$field['und'][0]['value'];
      } else {
        return 0;
      }
      break;
      case 'image' :
      if (!empty($field['und'][0]['uri'])) {
        if (isset($attributes['imagestyle'])) {
          $imagestyle = $attributes['imagestyle'];
        } else {
          $imagestyle = 'full_size';
        }

        if (isset($attributes['class'])) {
          $class = $attributes['class'];
        } else {
          $class = '';
        }

        $image = '<img src="' . image_style_url($imagestyle, $field['und'][0]['uri']) . '" class="' . $class . '">';
      } else {
        $image = '';
      }
      return $image;
      break;
      case 'node' :
      if(count($field)) {
        $result = array();
        foreach($field['und'] as $field_item) {
            //pr($field_item);
          $obj = $field_item;
          $tmp = new stdClass();
          $tmp -> nid = $obj['nid'];
          $tmp -> link = url('node/' . $obj['nid']);

          $node_tmp = node_load($obj['nid']);
          $tmp -> title = $node_tmp -> title;
          $tmp -> summary = isset($node_tmp -> body['und'][0]['safe_summary']) ? $node_tmp -> body['und'][0]['safe_summary'] : '';
          $node_type = $node_tmp->type;

          switch($node_type) {
            case 'product_detail':
                //pr($node_tmp);
            $tmp -> sub_title = __get_field_value($node_tmp->field_product_sub_title, 'string');
            $tmp -> image_url = __get_field_value($node_tmp->field_product_image, 'file_url');
            $tmp -> summary = __get_field_value($node_tmp->field_product_summary, 'string');
            break;
            case 'event_detail':
            $tmp -> event_title = __get_field_value($node_tmp->field_event_title, 'string');
            $tmp -> image = __get_field_value($node_tmp->field_image, 'image', array('imagestyle' => 'event_top_thumbnail'));
            $tmp -> detail_link = url('node/' . $obj['nid']);
            break;
            default:
          }
          $result[] = $tmp;
        }
      }else{
        $result = array();
      }

      return $result;
      break;
      default :
      if (isset($field['und'][0]['value'])) {
        return $field['und'][0]['value'];
      } else {
        return '';
      }
      break;
    }
  }



  function __removeSpecialCharacters($str) {
    return preg_replace('/[^a-zA-Z0-9.]/s', '',$str);
  }


/**
 * Get youtube video ID from youtube url.
 */

function get_youtube_id_from_url( $url ) {
  $url_info = parse_url($url);
  $result = '';
  if(isset($url_info['query'])) {
    $query = array();
    parse_str($url_info['query'], $query);
    $result = $query['v'];
  }
  return $result;
}


/**
 *
 * PARA: Date Should In YYYY-MM-DD Format
 * RESULT FORMAT:
 *  '%y Year %m Month %d Day %h Hours %i Minute %s Seconds'        =>  1 Year 3 Month 14 Day 11 Hours 49 Minute 36 Seconds
 *  '%y Year %m Month %d Day'                                    =>  1 Year 3 Month 14 Days
 *  '%m Month %d Day'                                            =>  3 Month 14 Day
 *  '%d Day %h Hours'                                            =>  14 Day 11 Hours
 *  '%d Day'                                                        =>  14 Days
 *  '%h Hours %i Minute %s Seconds'                                =>  11 Hours 49 Minute 36 Seconds
 *  '%i Minute %s Seconds'                                        =>  49 Minute 36 Seconds
 *  '%h Hours                                                    =>  11 Hours
 *  '%a Days                                                        =>  468 Days
 *
 * (PHP 5 >= 5.3.0)
 */

function __datediff($date_part, $date_start, $date_end = ''){

  if( is_integer($date_start) )
    $date_start = date_create(date('Y-m-d H:i:s', $date_start));

  if( empty($date_end) )
    $date_end = date_create(date('Y-m-d H:i:s'));

  if( is_integer($date_end) )
    $date_end = date_create(date('Y-m-d H:i:s', $date_end));

  $diff = date_diff($date_start, $date_end);

  return intval($diff->format("%{$date_part}"));
}


/**
 * Limit a string within max length.
 *
 */
function __limit_string( $string, $max_length, $ext_string = '' ) {
  $string = strip_tags( $string );
  //$string = trim_double_white_space( $string );
  $string = trim( $string );
  $str_length = strlen( $string );
  //$string = substr( $string, 0, $max_length );
  if($str_length > $max_length) {
    // Get last white space
    $pos = strrpos( $string, ' ', $max_length);
    $tmp_str = mb_substr( $string, 0, $max_length );
    $new_len = mb_strlen($tmp_str);
    if( $pos !== false && $pos > $new_len ) {
      $string = mb_substr( $tmp_str, 0, strrpos( $tmp_str, ' ', 0) );
    }
    else {
      $pos = strrpos( $tmp_str, ' ', 0);
      if( $pos !== false )
        $string = mb_substr( $string, 0, strrpos( $tmp_str, ' ', $pos ) );
      else
        $string = mb_substr($string, 0, $max_length);
    }
  }else{
    $ext_string = '';
  }

  return trim( $string, ',' ) . $ext_string;
}


function __get_data($data){
  if(!empty($data)){
    return $data;
  }
  return "";
}


/**
 * Limit a string within max length.
 *
 */
function __limit_string_without_space( $string, $max_length ) {
  $string = strip_tags( $string );
  $words = preg_split("/[\s]+/", $string);
  $nospace_string = implode('', $words);
  $strlen = strlen( $nospace_string );
  if( $strlen <= $max_length ) {
    return $string;
  }

  $cut_nospace_string = mb_substr( $nospace_string, 0, $max_length );
  $tmp_words = array();
  for( $i = 0; $i < sizeof($words); $i++){
    $word = $words[$i];
    $substr = mb_substr($cut_nospace_string, 0, strlen($word) );
    $cut_nospace_string = mb_substr($cut_nospace_string, strlen($word), strlen($cut_nospace_string) - strlen($word) );
    if( $substr != $word ) {
      break;
    }
    $tmp_words[] = $substr;
  }

  return implode(' ', $tmp_words);
}



/**
 * Encode a string by a method
 *
 * @param  data (string)
 *
 * @return  encoded_string(string)
 */

function __encode_password($data)
{
    // First we convert the array to a json string
  $encoded_str = md5($data);

  return $encoded_str;
}



/**
 * Convert an array into a stdClass()
 *
 * @param   array   $array  The array we want to convert
 *
 * @return  object
 */
function __array2object($array)
{
    // First we convert the array to a json string
  $json = json_encode($array);

    // The we convert the json string to a stdClass()
  $object = json_decode($json);

  return $object;
}


/**
 * Get base URL of picture by fid
 *
 * @param   fid (int)
 *
 * @return  picture_url(string)
 */
function __drupal_get_picture_by_fid($fid, $default_icon = '', $image_style = '')
{
  global $base_url;
  $picture_url = '';
  if(!empty($default_icon)){
    $picture_url = $base_url.base_path().path_to_theme().$default_icon;
  }
  $file = file_load($fid);
  if(!empty($file)){
    $uri = $file->uri;
    $url = file_create_url($uri);
    /*if(!$cache) {
      $arr = explode('?', $url);
      $url = $arr[0];
    }*/
    if(!empty($image_style)){
      $file_path = drupal_realpath($uri);
      $picture_url = image_style_url($image_style, $uri);
    } else {
      $picture_url =  $url;
    }
  }

  return $picture_url;
}



/**
 * Convert a object to an array
 *
 * @param   object  $object The object we want to convert
 *
 * @return  array
 */

function __object2array($object)
{
    // First we convert the object into a json string
  $json = json_encode($object);

    // Then we convert the json string to an array
  $array = json_decode($json, true);

  return $array;
}


/**
 * Filter an array to get only needed fields.
 *
 * $param array $source The array source
 * $param array $allow_fields The list of field need to retrieve.
 */

function __filter_array( $array_source, $allow_fields ){
  $result = array();
  foreach( $allow_fields as $key => $value ){
    $result[$value] = $array_source[$value];
  }
  return $result;
}

/**
 *
 */
function __stripslashes_recursive($value) {
  if ( is_array($value) ) {
    $value = array_map('stripslashes_recursive', $value);
  } elseif ( is_object($value) ) {
    $vars = get_object_vars( $value );
    foreach ($vars as $key=>$data) {
      $value->{$key} = stripslashes_recursive( $data );
    }
  } elseif ( is_string( $value ) ) {
    $value = stripslashes($value);
  }

  return $value;
}

function __strip_tags_array( $params = array() ){
  if(is_array( $params ) ) {
    foreach( $params as $key => $value ){
      if( is_array($value) ){
        $value = strip_tags_array( $value );
      }
      else {
        $value = strip_tags( $value );
      }

      $params[ $key ] = $value;
    }
  }

  return $params;
}


/**
 * Remove empty element.
 */
function __strip_empty_array( $params = array(), $except_numeric = 1, $trim_array = 1 ) {
  //Remove empty object.
  if(is_array($params)){
    //Trim parameters.
    if($trim_array)$params = trim_array($params);

    foreach($params as $key => $value){
      if(is_array($value)){
        $value = strip_empty_array($value,$except_numeric,0);
      }

      if(empty($value)&&(!is_numeric($value)||!$except_numeric))
        unset($params[$key]);
    }
  }

  return $params;
}


function __trim_array($params = array()){
  if(is_array($params)){
    foreach($params as $key => $value){
      if(is_array($value)){
        $value = trim_array($value);
      }elseif(is_string($value)){
        $value = trim($value);
      }

      $params[$key] = $value;
    }
  }
  return $params;
}

/**
 * Remove double white space
 */
function __trim_double_white_space( $param ) {
  //return preg_replace('/\s\s+/', ' ', $param);
  return preg_replace('/[ \t\r\n][ \t\r\n]+/', ' ', $param);
}


//Remove double white space and trim.
function __trim_complete($param){
  return trim(trim_double_white_space($param));
}

//trim_complete_array
/**
* Replace double white space and trim for all value of an array.
*/
function __trim_complete_array($params = array()){
  if(is_array($params)){
    foreach($params as $key => $value){
      if(is_array($value)){
        $value = trim_complete_array($value);
      }elseif(is_string($value)){
        $value = trim_complete($value);
      }

      $params[$key] = $value;
    }
  }
  return $params;
}


/*
** Validate datetime
** dd.mm.yyyy || mm/dd/yyyy || dd-mm-yyyy || yyyy-mm-dd
*/
//if( ! function_exists( "__is_valid_date" ) ) :
function __is_valid_date($date) {
  //return $date;exit;
  if(strlen($date) == 10) {
        $pattern = '/\.|\/|-/i';    // . or / or -
        preg_match($pattern, $date, $char);

        $array = preg_split($pattern, $date, -1, PREG_SPLIT_NO_EMPTY);

        if(strlen($array[2]) == 4) {
            // dd.mm.yyyy || dd-mm-yyyy
          if($char[0] == "."|| $char[0] == "-") {
            $month = $array[1];
            $day = $array[0];
            $year = $array[2];
          }
            // mm/dd/yyyy    # Common U.S. writing
          if($char[0] == "/") {
            $month = $array[0];
            $day = $array[1];
            $year = $array[2];
          }
        }
        // yyyy-mm-dd    # iso 8601
        if(strlen($array[0]) == 4 && $char[0] == "-") {
          $month = $array[1];
          $day = $array[2];
          $year = $array[0];
        }
        if(checkdate($month, $day, $year)) {    //Validate Gregorian date
          return TRUE;
        } else {
          return FALSE;
        }
      }else {
        return FALSE;    // more or less 10 chars
      }
    }
//endif;



/**
 * Validate domain
 * @author Võ Thanh Lâm
 */
function __is_valid_dnsrr( $email ) {
  if( ! function_exists('checkdnsrr') )
    return true;

  list( $email_username, $email_domain ) = split( '@', $email );
  if( checkdnsrr( $email_domain, "MX" ) === false )
    return false;
  else
    return true;
}


/**
 * Validate upload file
 * @author Võ Thanh Lâm
 */
function __is_valid_upload( $file, $max_size, $allow_types = array() ) {
  if( empty($file) )
    return false;

  if( $file["error"] )
    return false;

  if( ! in_array( $file['type'], $allow_types ) )
    return false;

  if( $file["size"] > $max_size ){
    return false;
  }

  return true;
}

/**
 * Get data from a url by using GET method
 * @author Võ Thanh Lâm
 */
function __curl_get($url, $time_out = 5) {
  $ch = curl_init();
  $timeout = 60;
  curl_setopt($ch,CURLOPT_URL,$url);
  curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);
  curl_setopt($ch,CURLOPT_CONNECTTIMEOUT,$timeout);
  $data = curl_exec($ch);
  curl_close($ch);
  return $data;
}


/**
 * Get data from a url by using POST method
 * @author Võ Thanh Lâm
 */
function __curl_post($url, $params) {
  $post_data = '';
  $sep = '';
  foreach($params as $name => $value) {
    $post_data .= $sep.urlencode($name).'='.urlencode($value);
    $sep = '&';
  }
  $ch = curl_init();
  $timeout = 5;
  curl_setopt($ch,CURLOPT_URL,$url);
  curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);
  curl_setopt($ch,CURLOPT_CONNECTTIMEOUT,$timeout);
  curl_setopt($ch,CURLOPT_POSTFIELDS,  $post_data);
  curl_setopt($ch,CURLOPT_POST, 1);
  $data = curl_exec($ch);
  curl_close($ch);
  return $data;
}


/**
 * Get twitter latest feeds
 * @author Võ Thanh Lâm
 */
function __get_tweets($username, $count = 10) {
  $url = 'http://api.twitter.com/1/statuses/user_timeline.json?screen_name='.$username.'&count='.$count;
  return json_decode(curl_get($url, 60));
}


/**
 * Detect url in text
 * @author Võ Thanh Lâm
 */
function __detect_url( $text ){
  // The Regular Expression filter
  $reg_exUrl = "/(http|https|ftp|ftps)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?/";

  // Check if there is a url in the text
  if( preg_match($reg_exUrl, $text, $url) )
    return $url;
  else
    return;
}


/**
 * Get current url
 * @author Võ Thanh Lâm
 */
function __get_current_url() {
  $pageURL = 'http';
  if ($_SERVER["HTTPS"] == "on") {
    $pageURL .= "s";
  }
  $pageURL .= "://";
  if ($_SERVER["SERVER_PORT"] != "80") {
    $pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];
  } else {
    $pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];
  }

  return $pageURL;
}



/**
 * Detect and generate html hyperlink tag.
 * @author Võ Thanh Lâm
 */
function __add_hyperlink( $text ) {
  // The Regular Expression filter
  $reg_exUrl = "/(http|https|ftp|ftps)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?/";

  // Check if there is a url in the text
  if(preg_match($reg_exUrl, $text, $url))
     // make the urls hyper links
    return preg_replace($reg_exUrl, '<a href="'.$url[0].'" target="_blank">'.$url[0].'</a> ', $text);
  else
    return $text;
}


/**
 * Get a file content.
 **/
function __read_file($path) {
  global $root_doc;
  if (file_exists($path)) {
    try {
      $fr  = fopen($path, 'r');
      $str = "";
      while (!feof($fr)) {
        $str .= fread($fr, 4096);
      }
      fclose($fr);
      return $str;
    }
    catch (Exception $e) {
      return false;
    }
  } else {
    return false;
  }
  return false;
}



/**
 * Create date stromg fpr datestring format YYYYMMDD
 **/
function __create_date_time_obj($date_time_int) {
  $day = substr($date_time_int, 6 , 2);
  $month = substr($date_time_int, 4 , 2);
  $year = substr($date_time_int, 0 , 4);

    $date_obj = $year .'-'. $month.'-'.$day;//date('Y-m-d', $year .'-'. $month.'-'.$day);

    return $date_obj;
  }


/**
 * Encode date from datetime format YYYYMMDD
 *
 * @param date YYYYMMDD
 * @return date Array
 *        - day (int)
 *        - month (int)
 *        - year (int)
 **/

function __encode_dob($date_time_obj) {
  $date_str = $date_time_obj["year"] . sprintf("%02d", $date_time_obj["month"]). sprintf("%02d", $date_time_obj["day"]);
  return $date_str;
}


/**
 * Decode date from datetime format YYYYMMDD
 *
 * @param date YYYYMMDD
 * @return date Array
 *        - day (int)
 *        - month (int)
 *        - year (int)
 **/
function __decode_dob($date_time_int) {
  $date_obj = array();

  $day = $date_time_int % 100;

  $date_temp = $date_time_int / 100;
  $month = $date_temp % 100;

  $date_temp = (int)($date_temp / 100);
  $year = $date_temp;

  if(isset($day)  && isset($month) && isset($year)){
    $date_obj = array(
      "day" => sprintf("%02d", $day),
      "month" => sprintf("%02d", $month),
      "year" => $year
      );
  }

  return $date_obj;
}

/**
 * Write fie if directory is not exists create new.
 */
function __write_file($string, $file_path){
  global $root_doc;

  $pathinfo = pathinfo( $file_path );
  if( empty($pathinfo['dirname']) )
    return false;

  if( !file_exists($pathinfo['dirname']) )
    mkdir( $pathinfo['dirname'], 0775, true );

  try {
    $ourFileHandle = fopen($file_path, 'w');
    fwrite($ourFileHandle,$string);
    fclose($ourFileHandle);
  } catch (Exception $e) {
    return false;
  }

  return true;
}


/**
 * Remove Vietnamese accents
 * @author Lâm
 */
function __remove_accents($string) {
  if ( !preg_match('/[\x80-\xff]/', $string) )
    return $string;

  if (seems_utf8($string)) {
    $chars = array(
    // Decompositions for Latin-1 Supplement
      chr(194).chr(170) => 'a', chr(194).chr(186) => 'o',
      chr(195).chr(128) => 'A', chr(195).chr(129) => 'A',
      chr(195).chr(130) => 'A', chr(195).chr(131) => 'A',
      chr(195).chr(132) => 'A', chr(195).chr(133) => 'A',
      chr(195).chr(134) => 'AE',chr(195).chr(135) => 'C',
      chr(195).chr(136) => 'E', chr(195).chr(137) => 'E',
      chr(195).chr(138) => 'E', chr(195).chr(139) => 'E',
      chr(195).chr(140) => 'I', chr(195).chr(141) => 'I',
      chr(195).chr(142) => 'I', chr(195).chr(143) => 'I',
      chr(195).chr(144) => 'D', chr(195).chr(145) => 'N',
      chr(195).chr(146) => 'O', chr(195).chr(147) => 'O',
      chr(195).chr(148) => 'O', chr(195).chr(149) => 'O',
      chr(195).chr(150) => 'O', chr(195).chr(153) => 'U',
      chr(195).chr(154) => 'U', chr(195).chr(155) => 'U',
      chr(195).chr(156) => 'U', chr(195).chr(157) => 'Y',
      chr(195).chr(158) => 'TH',chr(195).chr(159) => 's',
      chr(195).chr(160) => 'a', chr(195).chr(161) => 'a',
      chr(195).chr(162) => 'a', chr(195).chr(163) => 'a',
      chr(195).chr(164) => 'a', chr(195).chr(165) => 'a',
      chr(195).chr(166) => 'ae',chr(195).chr(167) => 'c',
      chr(195).chr(168) => 'e', chr(195).chr(169) => 'e',
      chr(195).chr(170) => 'e', chr(195).chr(171) => 'e',
      chr(195).chr(172) => 'i', chr(195).chr(173) => 'i',
      chr(195).chr(174) => 'i', chr(195).chr(175) => 'i',
      chr(195).chr(176) => 'd', chr(195).chr(177) => 'n',
      chr(195).chr(178) => 'o', chr(195).chr(179) => 'o',
      chr(195).chr(180) => 'o', chr(195).chr(181) => 'o',
      chr(195).chr(182) => 'o', chr(195).chr(184) => 'o',
      chr(195).chr(185) => 'u', chr(195).chr(186) => 'u',
      chr(195).chr(187) => 'u', chr(195).chr(188) => 'u',
      chr(195).chr(189) => 'y', chr(195).chr(190) => 'th',
      chr(195).chr(191) => 'y', chr(195).chr(152) => 'O',
    // Decompositions for Latin Extended-A
      chr(196).chr(128) => 'A', chr(196).chr(129) => 'a',
      chr(196).chr(130) => 'A', chr(196).chr(131) => 'a',
      chr(196).chr(132) => 'A', chr(196).chr(133) => 'a',
      chr(196).chr(134) => 'C', chr(196).chr(135) => 'c',
      chr(196).chr(136) => 'C', chr(196).chr(137) => 'c',
      chr(196).chr(138) => 'C', chr(196).chr(139) => 'c',
      chr(196).chr(140) => 'C', chr(196).chr(141) => 'c',
      chr(196).chr(142) => 'D', chr(196).chr(143) => 'd',
      chr(196).chr(144) => 'D', chr(196).chr(145) => 'd',
      chr(196).chr(146) => 'E', chr(196).chr(147) => 'e',
      chr(196).chr(148) => 'E', chr(196).chr(149) => 'e',
      chr(196).chr(150) => 'E', chr(196).chr(151) => 'e',
      chr(196).chr(152) => 'E', chr(196).chr(153) => 'e',
      chr(196).chr(154) => 'E', chr(196).chr(155) => 'e',
      chr(196).chr(156) => 'G', chr(196).chr(157) => 'g',
      chr(196).chr(158) => 'G', chr(196).chr(159) => 'g',
      chr(196).chr(160) => 'G', chr(196).chr(161) => 'g',
      chr(196).chr(162) => 'G', chr(196).chr(163) => 'g',
      chr(196).chr(164) => 'H', chr(196).chr(165) => 'h',
      chr(196).chr(166) => 'H', chr(196).chr(167) => 'h',
      chr(196).chr(168) => 'I', chr(196).chr(169) => 'i',
      chr(196).chr(170) => 'I', chr(196).chr(171) => 'i',
      chr(196).chr(172) => 'I', chr(196).chr(173) => 'i',
      chr(196).chr(174) => 'I', chr(196).chr(175) => 'i',
      chr(196).chr(176) => 'I', chr(196).chr(177) => 'i',
      chr(196).chr(178) => 'IJ',chr(196).chr(179) => 'ij',
      chr(196).chr(180) => 'J', chr(196).chr(181) => 'j',
      chr(196).chr(182) => 'K', chr(196).chr(183) => 'k',
      chr(196).chr(184) => 'k', chr(196).chr(185) => 'L',
      chr(196).chr(186) => 'l', chr(196).chr(187) => 'L',
      chr(196).chr(188) => 'l', chr(196).chr(189) => 'L',
      chr(196).chr(190) => 'l', chr(196).chr(191) => 'L',
      chr(197).chr(128) => 'l', chr(197).chr(129) => 'L',
      chr(197).chr(130) => 'l', chr(197).chr(131) => 'N',
      chr(197).chr(132) => 'n', chr(197).chr(133) => 'N',
      chr(197).chr(134) => 'n', chr(197).chr(135) => 'N',
      chr(197).chr(136) => 'n', chr(197).chr(137) => 'N',
      chr(197).chr(138) => 'n', chr(197).chr(139) => 'N',
      chr(197).chr(140) => 'O', chr(197).chr(141) => 'o',
      chr(197).chr(142) => 'O', chr(197).chr(143) => 'o',
      chr(197).chr(144) => 'O', chr(197).chr(145) => 'o',
      chr(197).chr(146) => 'OE',chr(197).chr(147) => 'oe',
      chr(197).chr(148) => 'R',chr(197).chr(149) => 'r',
      chr(197).chr(150) => 'R',chr(197).chr(151) => 'r',
      chr(197).chr(152) => 'R',chr(197).chr(153) => 'r',
      chr(197).chr(154) => 'S',chr(197).chr(155) => 's',
      chr(197).chr(156) => 'S',chr(197).chr(157) => 's',
      chr(197).chr(158) => 'S',chr(197).chr(159) => 's',
      chr(197).chr(160) => 'S', chr(197).chr(161) => 's',
      chr(197).chr(162) => 'T', chr(197).chr(163) => 't',
      chr(197).chr(164) => 'T', chr(197).chr(165) => 't',
      chr(197).chr(166) => 'T', chr(197).chr(167) => 't',
      chr(197).chr(168) => 'U', chr(197).chr(169) => 'u',
      chr(197).chr(170) => 'U', chr(197).chr(171) => 'u',
      chr(197).chr(172) => 'U', chr(197).chr(173) => 'u',
      chr(197).chr(174) => 'U', chr(197).chr(175) => 'u',
      chr(197).chr(176) => 'U', chr(197).chr(177) => 'u',
      chr(197).chr(178) => 'U', chr(197).chr(179) => 'u',
      chr(197).chr(180) => 'W', chr(197).chr(181) => 'w',
      chr(197).chr(182) => 'Y', chr(197).chr(183) => 'y',
      chr(197).chr(184) => 'Y', chr(197).chr(185) => 'Z',
      chr(197).chr(186) => 'z', chr(197).chr(187) => 'Z',
      chr(197).chr(188) => 'z', chr(197).chr(189) => 'Z',
      chr(197).chr(190) => 'z', chr(197).chr(191) => 's',
    // Decompositions for Latin Extended-B
      chr(200).chr(152) => 'S', chr(200).chr(153) => 's',
      chr(200).chr(154) => 'T', chr(200).chr(155) => 't',
    // Euro Sign
      chr(226).chr(130).chr(172) => 'E',
    // GBP (Pound) Sign
      chr(194).chr(163) => '',
    // Vowels with diacritic (Vietnamese)
    // unmarked
      chr(198).chr(160) => 'O', chr(198).chr(161) => 'o',
      chr(198).chr(175) => 'U', chr(198).chr(176) => 'u',
    // grave accent
      chr(225).chr(186).chr(166) => 'A', chr(225).chr(186).chr(167) => 'a',
      chr(225).chr(186).chr(176) => 'A', chr(225).chr(186).chr(177) => 'a',
      chr(225).chr(187).chr(128) => 'E', chr(225).chr(187).chr(129) => 'e',
      chr(225).chr(187).chr(146) => 'O', chr(225).chr(187).chr(147) => 'o',
      chr(225).chr(187).chr(156) => 'O', chr(225).chr(187).chr(157) => 'o',
      chr(225).chr(187).chr(170) => 'U', chr(225).chr(187).chr(171) => 'u',
      chr(225).chr(187).chr(178) => 'Y', chr(225).chr(187).chr(179) => 'y',
    // hook
      chr(225).chr(186).chr(162) => 'A', chr(225).chr(186).chr(163) => 'a',
      chr(225).chr(186).chr(168) => 'A', chr(225).chr(186).chr(169) => 'a',
      chr(225).chr(186).chr(178) => 'A', chr(225).chr(186).chr(179) => 'a',
      chr(225).chr(186).chr(186) => 'E', chr(225).chr(186).chr(187) => 'e',
      chr(225).chr(187).chr(130) => 'E', chr(225).chr(187).chr(131) => 'e',
      chr(225).chr(187).chr(136) => 'I', chr(225).chr(187).chr(137) => 'i',
      chr(225).chr(187).chr(142) => 'O', chr(225).chr(187).chr(143) => 'o',
      chr(225).chr(187).chr(148) => 'O', chr(225).chr(187).chr(149) => 'o',
      chr(225).chr(187).chr(158) => 'O', chr(225).chr(187).chr(159) => 'o',
      chr(225).chr(187).chr(166) => 'U', chr(225).chr(187).chr(167) => 'u',
      chr(225).chr(187).chr(172) => 'U', chr(225).chr(187).chr(173) => 'u',
      chr(225).chr(187).chr(182) => 'Y', chr(225).chr(187).chr(183) => 'y',
    // tilde
      chr(225).chr(186).chr(170) => 'A', chr(225).chr(186).chr(171) => 'a',
      chr(225).chr(186).chr(180) => 'A', chr(225).chr(186).chr(181) => 'a',
      chr(225).chr(186).chr(188) => 'E', chr(225).chr(186).chr(189) => 'e',
      chr(225).chr(187).chr(132) => 'E', chr(225).chr(187).chr(133) => 'e',
      chr(225).chr(187).chr(150) => 'O', chr(225).chr(187).chr(151) => 'o',
      chr(225).chr(187).chr(160) => 'O', chr(225).chr(187).chr(161) => 'o',
      chr(225).chr(187).chr(174) => 'U', chr(225).chr(187).chr(175) => 'u',
      chr(225).chr(187).chr(184) => 'Y', chr(225).chr(187).chr(185) => 'y',
    // acute accent
      chr(225).chr(186).chr(164) => 'A', chr(225).chr(186).chr(165) => 'a',
      chr(225).chr(186).chr(174) => 'A', chr(225).chr(186).chr(175) => 'a',
      chr(225).chr(186).chr(190) => 'E', chr(225).chr(186).chr(191) => 'e',
      chr(225).chr(187).chr(144) => 'O', chr(225).chr(187).chr(145) => 'o',
      chr(225).chr(187).chr(154) => 'O', chr(225).chr(187).chr(155) => 'o',
      chr(225).chr(187).chr(168) => 'U', chr(225).chr(187).chr(169) => 'u',
    // dot below
      chr(225).chr(186).chr(160) => 'A', chr(225).chr(186).chr(161) => 'a',
      chr(225).chr(186).chr(172) => 'A', chr(225).chr(186).chr(173) => 'a',
      chr(225).chr(186).chr(182) => 'A', chr(225).chr(186).chr(183) => 'a',
      chr(225).chr(186).chr(184) => 'E', chr(225).chr(186).chr(185) => 'e',
      chr(225).chr(187).chr(134) => 'E', chr(225).chr(187).chr(135) => 'e',
      chr(225).chr(187).chr(138) => 'I', chr(225).chr(187).chr(139) => 'i',
      chr(225).chr(187).chr(140) => 'O', chr(225).chr(187).chr(141) => 'o',
      chr(225).chr(187).chr(152) => 'O', chr(225).chr(187).chr(153) => 'o',
      chr(225).chr(187).chr(162) => 'O', chr(225).chr(187).chr(163) => 'o',
      chr(225).chr(187).chr(164) => 'U', chr(225).chr(187).chr(165) => 'u',
      chr(225).chr(187).chr(176) => 'U', chr(225).chr(187).chr(177) => 'u',
      chr(225).chr(187).chr(180) => 'Y', chr(225).chr(187).chr(181) => 'y',
      );

$string = strtr($string, $chars);
} else {
    // Assume ISO-8859-1 if not UTF-8
  $chars['in'] = chr(128).chr(131).chr(138).chr(142).chr(154).chr(158)
  .chr(159).chr(162).chr(165).chr(181).chr(192).chr(193).chr(194)
  .chr(195).chr(196).chr(197).chr(199).chr(200).chr(201).chr(202)
  .chr(203).chr(204).chr(205).chr(206).chr(207).chr(209).chr(210)
  .chr(211).chr(212).chr(213).chr(214).chr(216).chr(217).chr(218)
  .chr(219).chr(220).chr(221).chr(224).chr(225).chr(226).chr(227)
  .chr(228).chr(229).chr(231).chr(232).chr(233).chr(234).chr(235)
  .chr(236).chr(237).chr(238).chr(239).chr(241).chr(242).chr(243)
  .chr(244).chr(245).chr(246).chr(248).chr(249).chr(250).chr(251)
  .chr(252).chr(253).chr(255);

  $chars['out'] = "EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy";

  $string = strtr($string, $chars['in'], $chars['out']);
  $double_chars['in'] = array(chr(140), chr(156), chr(198), chr(208), chr(222), chr(223), chr(230), chr(240), chr(254));
  $double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');
  $string = str_replace($double_chars['in'], $double_chars['out'], $string);
}

return $string;
}


/**
 * Generate GUID
 */
function __create_guid($prefix="guid"){
  return md5(time().uniqid($prefix));
}

/**
 * Generate GUID
 */
function __get_current_date(){
  return date('Ymd');
}





/**
 * Execute soap request
 */

function __soap_request($url, $headers, $xml_request ) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL , $url );
  curl_setopt($ch, CURLOPT_RETURNTRANSFER , 1);
  curl_setopt($ch, CURLOPT_TIMEOUT , 60);
  curl_setopt($ch, CURLOPT_HTTPHEADER , $headers );
  curl_setopt($ch, CURLOPT_USERAGENT , $defined_vars['HTTP_USER_AGENT'] );
  curl_setopt($ch, CURLOPT_POST , 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS , $xml_request );
  $xml_response = curl_exec($ch);
  if (curl_errno($ch)) {
    $error_message = curl_error($ch);
    $error_no = curl_errno($ch);
  }
  return $xml_response;
}




function __setcookie($name, $value, $expire = 0){
  $expire = (int)$expire;

  if( !empty($expire) )
    $expire = time() + $expire;

  if( defined("COOKIE_DOMAIN") && false !== strpos($_SERVER['HTTP_HOST'], COOKIE_DOMAIN) )
    setcookie($name, $value, $expire, '/',COOKIE_DOMAIN);
  else
    setcookie($name, $value, $expire, '/');
}

///cookie ultilities
function __unsetcookie($key){
  _setcookie ($key, "", time() - 3600);
}

//destroy all cookie
function __destroy_cookies(){
  foreach ( $_COOKIE as $name => $value )
    _unsetcookie($name);
}

/**
 * Create the image thumbnail
 *
 */
function __get_thumbnail( $image_url, $width, $height ) {
  $upload_dir = wp_upload_dir();
  $image_path = str_replace( $upload_dir['baseurl'], $upload_dir['basedir'], $image_url );
  $pathinfo = pathinfo( $image_path );
  $new_file_name = sprintf( "%s_%sx%s.%s", $pathinfo['basename'], $width, $height, $pathinfo['extension'] );
  $new_image_path = $pathinfo['dirname'] . '/' . $new_file_name;

  if( file_exists($new_image_path) )
    return str_replace($upload_dir['basedir'], $upload_dir['baseurl'], $new_image_path);


  if( !class_exists('PhpThumbFactory') )
    require_once('thumbnail/ThumbLib.inc.php');

  $image = PhpThumbFactory::create( $image_path );
  $image->adaptiveResizeQuadrant( $width, $height );
  $image->save( $new_image_path );
  return str_replace($upload_dir['basedir'], $upload_dir['baseurl'], $new_image_path);
}





function __custom_image_resize_dimensions($output, $orig_w, $orig_h, $dest_w, $dest_h, $crop = false) {

  if ( null !== $output )
    return $output;

  if ( $crop ) {
    #$data = compact('orig_w', 'orig_h', 'dest_w', 'dest_h');
    #echo 'data<pre>'.print_r($data, true). '</pre>';
    if ( $dest_w > $orig_w || $dest_h > $orig_h ) {

      /*if( $orig_w / $orig_h >= $dest_w / $dest_h ) { // Landscape
        $dest_w = ceil($orig_w * $orig_h / $dest_h);
        $dest_h = $orig_h;
      }else{
        $dest_h = ceil( $orig_h * ( $orig_w / $dest_w ) ); // Portrait
        $dest_w = $orig_w;
      }*/

      if( $orig_w / $orig_h >= $dest_w / $dest_h ) { // Landscape
        $dest_w = ceil($orig_h * $dest_w / $dest_h);
        $dest_h = $orig_h;
      }else{
        $dest_h = ceil( $orig_w * ( $dest_h / $dest_w ) ); // Portrait
        $dest_w = $orig_w;
      }
    }

    #$data = compact('orig_w', 'orig_h', 'dest_w', 'dest_h');
    #echo 'data<pre>'.print_r($data, true). '</pre>';exit;

    // crop the largest possible portion of the original image that we can size to $dest_w x $dest_h
    $aspect_ratio = $orig_w / $orig_h;
    $new_w = min($dest_w, $orig_w);
    $new_h = min($dest_h, $orig_h);

    if ( !$new_w ) {
      $new_w = intval($new_h * $aspect_ratio);
    }

    if ( !$new_h ) {
      $new_h = intval($new_w / $aspect_ratio);
    }

    $size_ratio = max($new_w / $orig_w, $new_h / $orig_h);

    $crop_w = round($new_w / $size_ratio);
    $crop_h = round($new_h / $size_ratio);

    $s_x = floor( ($orig_w - $crop_w) / 2 );
    $s_y = 0;

  } else {
    return;
  }

  // if the resulting image would be the same size or larger we don't want to resize it
  if ( $new_w >= $orig_w && $new_h >= $orig_h ) {
    return false;
  }

  // the return array matches the parameters to imagecopyresampled()
  // int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h
  return array( 0, 0, (int) $s_x, (int) $s_y, (int) $new_w, (int) $new_h, (int) $crop_w, (int) $crop_h );
}


function __get_image_size( $image_url, $width, $height, $crop = false, $position = '' ) {

  $upload_dir = wp_upload_dir();
  $image_path = str_replace( $upload_dir['baseurl'], $upload_dir['basedir'], $image_url );
  $pathinfo = pathinfo( $image_path );
  $pathinfo['filename'] = strtolower(sanitize_file_name($pathinfo['filename']));
  $pathinfo['extension'] = strtolower($pathinfo['extension']);

  if( $position ) {
    $new_file_name = sprintf( "%s_%sx%s_%s.%s", $pathinfo['filename'], $width, $height, strtolower($position), $pathinfo['extension'] );
  }else{
    $new_file_name = sprintf( "%s_%sx%s.%s", $pathinfo['filename'], $width, $height, $pathinfo['extension'] );
  }

  $new_image_path = $pathinfo['dirname'] . '/' . $new_file_name;

  if( ! file_exists($image_path) ) {
    /*// Try to upload file via url.
    $filedata = file_get_contents($image_url);
    if( $filedata ) {
      $urlinfo = parse_url($image_url);
      $upload_path = $upload_dir['basedir'].'/'.$urlinfo['host'];
      $filename = str_replace('/', '-', trim($urlinfo['path'], '/'));
      if( ! file_exists($new_path) ) {
        if( ! wp_mkdir_p($upload_path) )
          return $image_url;
      }

      if( ! file_exists($upload_path. '/' . $filename) )
        file_put_contents($upload_path. '/' . $filename, $filedata);

      if( file_exists($upload_path. '/' . $filename) ) {
        $image_url = str_replace($upload_dir['basedir'], $upload_dir['baseurl'], $upload_path. '/' . $filename);
        return get_image_size( $image_url, $width, $height, $crop, $position );
      }else{
        return $image_url;
      }
    }*/

    return $image_url;
  }

  if( file_exists($new_image_path) )
    return str_replace($upload_dir['basedir'], $upload_dir['baseurl'], $new_image_path);

  $image = wp_get_image_editor( $image_path );

  if ( ! is_wp_error( $image ) ) {

    if( strtoupper( $position ) == 'T' ) {
      add_filter('image_resize_dimensions', 'custom_image_resize_dimensions', 10, 6);
    }

    $image->resize( $width, $height, $crop );
    $image->save( $new_image_path );

    if( strtoupper( $position ) == 'T' ) {
      remove_filter('image_resize_dimensions', 'custom_image_resize_dimensions', 10);
    }

    return str_replace($upload_dir['basedir'], $upload_dir['baseurl'], $new_image_path);
  }

  return false;
}



function __crop_image( $src_url, $dst_url = '', $src_x, $src_y, $src_w, $src_h, $dst_w = null, $dst_h = null, $src_abs = false ) {
  $upload_dir = wp_upload_dir();
  $src_path = str_replace( $upload_dir['baseurl'], $upload_dir['basedir'], $src_url );
  if( empty($dst_url) ) {
    $pathinfo = pathinfo( $src_path );
    $dst_filename = sprintf( "%s_%sx%s.%s", $pathinfo['filename'], $src_w, $src_h, $pathinfo['extension'] );
    $dst_path = $pathinfo['dirname'] . '/' . $dst_filename;
  }else{
    $dst_path = str_replace( $upload_dir['baseurl'], $upload_dir['basedir'], $dst_url );
  }

  $image = wp_get_image_editor( $src_path );
  if ( ! is_wp_error( $image ) ) {
    //$image->resize( $width, $height, $crop );
    $image->crop( $src_x, $src_y, $src_w, $src_h, $dst_w, $dst_h, $src_abs );
    $image->save( $dst_path );
    return str_replace($upload_dir['basedir'], $upload_dir['baseurl'], $dst_path);
  }

  return false;
}



function __array2xml($array, $xml = false){
  if($xml === false){
    $xml = new SimpleXMLElement('<root/>');
  }
  foreach($array as $key => $value){
    if(is_array($value)){
      array2xml($value, $xml->addChild($key));
    }else{
      $xml->addChild($key, $value);
    }
  }
  return $xml->asXML();
}


///---- check if password is strong or not ----//
///--------------------------------------------//
/*function __is_strong_password($password){

  return preg_match("#.*^(?=.{8,20})(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*\W).*$#", $password);
}
*/

function __is_strong_password($password){
  $match_lower =  preg_match("/[a-z]+/", $password);
  $match_upper =  preg_match("/[A-Z]+/", $password);
  $match_number =  preg_match("/[0-9]+/", $password);
  $match_special =  preg_match("/[\W]+/", $password);

  $match_valid_success = 0;

  $match_valid_success += ($match_lower) ? 1 : 0;
  $match_valid_success += ($match_upper) ? 1 : 0;
  $match_valid_success += ($match_number) ? 1 : 0;
  $match_valid_success += ($match_special) ? 1 : 0;

  if($match_valid_success < 2){
    return false;
  }
  return true;
}


function __is_valid_mobile($param){
  $regex = "/^(\d[\s-]?)?[\(\[\s-]{0,2}?\d{1,3}[\)\]\s-]{0,2}?\d{3}[\s-]?\d{4}$/i";
  return(preg_match($regex, $param));
}


/***
*
* Validate date time object
*/
/*function __is_valid_date($date)
{
    $d = DateTime::createFromFormat('Y-m-d', $date);
    return $d && $d->format('Y-m-d') == $date;
  }*/

/**
*
* validate access token
*
*/
function __is_valid_token($token, $check_key){
  $secret_key = "14e1b600b1fd579f47433b88e8d85291";

  $token_checked = md5($secret_key . $check_key);

  if(empty($token) || ($token != $token_checked)){
    return FALSE;
  }
  return TRUE;
}

function __calculate_age($dob){

  $age = 0 ;
  try {
    if(DateTime::createFromFormat('Y-m-d', $dob) !== FALSE){
      $from = DateTime::createFromFormat('Y-m-d',$dob);
    } else {
      $from   = new DateTime('today');
    }
  } catch (Exception $e) {

    $from   = new DateTime('today');
  }
  $to   = new DateTime('today');
  $age = $from->diff($to)->y;




  return $age;
}
/**
*
* Validate Json format
*
*/
function __isJSON($string){
  return is_string($string) && is_object(json_decode($string)) && (json_last_error() == JSON_ERROR_NONE) ? true : false;
}

/**
*
* Validate Email format
*
*/
function __is_valid_email($email)
{
   if (filter_var($email, FILTER_VALIDATE_EMAIL)) { // The email address is valid
    return TRUE;
   } else { // The email address is not valid
    return FALSE;
  }
}

/**
*
* Validate Email format
*
*/
function __is_valid_phonenumber($phone_number)
{
  return TRUE;
   if (filter_var($phone_number, FILTER_VALIDATE_EMAIL)) { // The email address is valid
    return TRUE;
   } else { // The email address is not valid
    return FALSE;
  }
}


/**
 *
 *
 **/
/*
function __save_image_base64( $image_base64, $is_publish = true ) {
  $image_data = base64_decode( $image_base64 );

  $ret = array();
  if( empty($image_data) )
    return false;

  $upload_dir = wp_upload_dir();
  $filename = uniqid(md5(rand()), true);
  if( $is_publish ) {
    $filename .= ".jpg";
  }

  $upload_path = sprintf("%s/photos/%s/", rtrim($upload_dir['basedir'], '/'), date('Y/m/d', current_time('timestamp')));
  $upload_url = sprintf("%s/photos/%s/", rtrim($upload_dir['baseurl'], '/'), date('Y/m/d', current_time('timestamp')));

  if( wp_mkdir_p($upload_path) ) {
    $path = $upload_path . $filename;
    $url = $upload_url . $filename;
  }
  else {
    $path = $upload_dir['basedir'] . '/' . $filename;
    $url = $upload_dir['baseurl'] . '/' . $filename;
  }

  if( file_put_contents($path, $image_data) ) {
    return compact('path', 'url');
  }

  return false;
}*/
if(!function_exists("file_get_contents")) {
  function file_get_contents($url) {
    //aaa
  }
}


function __encode_oo_password($pwd) {
  return md5($pwd);
}


function __save_image_base64($image_base64, $type ) {
  if($image_base64) {
    $ext = '.jpg';
    switch($type) {
      case 'image/jpeg':
      $ext = '.jpg';
      break;
      case 'image/gif':
      $ext = '.gif';
      break;
      case 'image/gif':
      $ext = '.png';
      break;
      default:
      $ext = '.jpg';
      break;

    }
    $external_image = base64_decode($image_base64);
    $file = file_save_data($external_image, 'public://'.time().'_'.rand(1000,9999).$ext , FILE_EXISTS_REPLACE);
    if (is_object($file) && file_exists($file->uri)) {
      $file->status = 1;
      $file = file_save($file);
      drupal_write_record('file_usage', $file);
      return (array) $file;
    }
  }
  return null;
}


function write_file_recursive($dir, $filename = 'index.php', $data = ''){
  $path = "{$dir}/{$filename}";
  if( file_exists($path) )
    return false;
  @file_put_contents($path, $data);
  $files = array_diff(scandir($dir), array('.','..'));
  foreach ($files as $file) {
    if(is_dir("$dir/$file")) {
      write_file_recursive("$dir/$file", $filename, $data);
    }
  }
}

/**
 * Insert element into array to specific position?
 *
 * @author Vo Thanh Lam
 * @param $array array The base array.
 * @param $elements array The element need to add.
 * @param $position int The position.
 * @return array The new array.
 */
function __array_insert($array, $elements, $position = 0) {

  if( !is_array($array) ) {
    return;
  }

  if( empty($elements) ) {
    return $array;
  }

  if( !is_array($elements) ) {
    $elements = (array)$elements;
  }

  $position = min( $position, count($array) );

  if( $position == 0 ) {
    return $elements + $array;
  }elseif( $position == count($array) ) {
    return $array + $elements;
  }

  return array_slice($array, 0, $position, true) + $elements + array_slice($array, $position, count($array) - 1, true) ;
}


function parse_bool($str){
  return filter_var($str, FILTER_VALIDATE_BOOLEAN);
}


function __dump($obj) {
  print '<pre>';
  print_r($obj);
  print '</pre>';
}




/**
* Save Bas64 image into Drupal Media
* @return ID of file
*/
function __save_file_with_base64($base64_string) {
  return 0;
}

function __is_null_or_empty($str) {
  if(trim($str) == '' || is_null($str)) {
    return FALSE;
  }
  return TRUE;
}


function __get_mom_access_token($mom_id) {

  if($item = db_query("SELECT access_code FROM milo_mec_user_mobile WHERE user_id = :mom_id ORDER BY created_date DESC LIMIT 1",array(':mom_id'=>$mom_id))->fetchObject()) {
    return $item->access_code;
  }
  return null;
}



function __get_image_from_fid($fid,$image_style = '') {
  $file = file_load($fid);
  return ($file->uri ? '<img src="'.image_style_url($image_style ? $image_style : 'thumbnail',$file->uri).'" class="hide-for-small">' : '');
}

function __get_image_path_from_fid($fid,$image_style = '') {
  $file = file_load($fid);
  return image_style_url($image_style ? $image_style : 'thumbnail',$file->uri);
}



/**
* hook_mail
*/
function oo_common_mail($key,&$message,$params)  {

 switch ($key) {
   case 'send_mail':
   $message['subject']=t($params['subject']);
   $message['body'][]=$params['body'];
   $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
   break;
 }
}

 /**
 * Custom Send Email
 */
 function __send_email($subject, $body, $to, $from){
  global $language;
  $params = array(
    'subject' => $subject,
    'body' => $body,
    );

  drupal_mail('oo_common', 'send_mail', $to, $language, $params);
}





function pr($result = '', $e = 0) {
  echo '<pre>';
  print_r($result);
  echo '</pre>';
  if ($e) {
    exit ;
  }
}




/* EXPORT */
function createExcelFile($header, $formatExcel = array()) {
  require_once DRUPAL_ROOT.'/'.'sites/all/libraries/PHPExcel/PHPExcel.php';

    // Create report
  $objPHPExcel = new PHPExcel();

    // Set document properties
  $objPHPExcel->getProperties()->setCreator("setCreator")
  ->setLastModifiedBy("setLastModifiedBy")
  ->setTitle("setTitle")
  ->setSubject("setSubject")
  ->setDescription("setDescription")
  ->setKeywords("setKeywords")
  ->setCategory("setCategory");

    // Set default columns
  $styleArray = array(
    'font'  => array(
      'bold'  => true,
      'color' => array('rgb' => 'FFFFFF')
      ),
    'borders' => array(
      'allborders' => array(
        'style' => PHPExcel_Style_Border::BORDER_THIN
        )
      )
    );

  $sheet1 = $objPHPExcel->getActiveSheet(0);

  foreach($header as $k=>$v) {

        // Write Header
    $sheet1->setCellValue($k.'1', $v);

        // Set Column Width
    if(isset($formatExcel['c_width'][$k])) {
      $sheet1->getColumnDimension($k)->setWidth($formatExcel['c_width'][$k]);
    } else {
      $sheet1->getColumnDimension($k)->setAutoSize(true);
    }
  }

  $sheet1->getStyle('A1:'.$sheet1->getHighestColumn().'1')->applyFromArray($styleArray);
    // Set cell background color
  cellColor($objPHPExcel, 'A1:'.$sheet1->getHighestColumn().'1', '0489B1');
    // Set Column Alignment
  $sheet1->getStyle('A1:'.$sheet1->getHighestColumn().'1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

  return $objPHPExcel;
}

/**
 * Set cell background color
 *
 * @param $objPHPExcel
 * @param $cells
 * @param $color
 */
function cellColor($objPHPExcel, $cells, $color) {
  $objPHPExcel->getActiveSheet()->getStyle($cells)->getFill()
  ->applyFromArray(array('type' => PHPExcel_Style_Fill::FILL_SOLID,
    'startcolor' => array('rgb' => $color)
    ));
}


/**
 * Download excel file
 * @param $objPHPExcel
 */
function downloadExcelFile($objPHPExcel, $fileName = 'report.xls') {

  $styleArray = array(
    'borders' => array(
      'allborders' => array(
        'style' => PHPExcel_Style_Border::BORDER_THIN,
        'color' => array('rgb' => '333333')
        )
      )
    );

  $objPHPExcel->getActiveSheet()->getStyle(
    'A1:' .
    $objPHPExcel->getActiveSheet()->getHighestColumn() .
    $objPHPExcel->getActiveSheet()->getHighestRow()
    )->applyFromArray($styleArray);

    // Rename worksheet
  $objPHPExcel->getActiveSheet()->setTitle('Report');

    // Set active sheet index to the first sheet, so Excel opens this as the first sheet
  $objPHPExcel->setActiveSheetIndex(0);

    // Download file
  header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
  header('Content-Disposition: attachment;filename="'.$fileName.'"');
  header('Cache-Control: max-age=0');

    // Do your stuff here
  $writer = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
    // This line will force the file to download
  $writer->save('php://output');
  exit();
}

function __export_to_excel ($data, $name ='') {
  $_headers = array(
    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
    ,'AA','AB','AC','AD','AE','AF','AG','AH','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
    );
  $headers = $data['headers'];
  $arrHeaders = array();
  foreach($headers as $key=>$value) {
    $arrHeaders[$_headers[$key]]  = $value;
  }



  $objPHPExcel = createExcelFile($arrHeaders);


  $rowCount = 1;
  $rows = $data['rows'];
  foreach($rows as $item) {
    $rowCount++;
    foreach($item as $key=>$value) {
      $objPHPExcel->getActiveSheet()->setCellValue($_headers[$key].$rowCount, $value);
    }
  }

  downloadExcelFile($objPHPExcel, $name);
  die;
}
